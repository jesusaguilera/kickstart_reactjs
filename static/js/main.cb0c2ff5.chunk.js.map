{"version":3,"sources":["serviceWorker.js","containers/Home.js","containers/About.js","containers/NotFound.js","components/Nav.js","components/Logo.js","components/Header.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Home","className","About","NotFound","Nav","to","Logo","Header","App","useEffect","document","title","render","TransitionGroup","component","appear","CSSTransition","key","classNames","timeout","path","exact","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0CCPSC,EATF,WACX,OAEE,6BAASC,UAAU,oBACjB,8CCISC,EARD,WACZ,OACE,6BAASD,UAAU,oBACjB,+CCKSE,EARE,WACf,OACE,6BAASF,UAAU,aACjB,qCCkBSG,EAlBH,WAEV,OAEI,yBAAKH,UAAU,SACb,wBAAIA,UAAU,eACZ,wBAAIA,UAAU,oBACZ,kBAAC,IAAD,CAAMI,GAAG,IAAIJ,UAAU,eAAvB,SAEF,wBAAIA,UAAU,oBACZ,kBAAC,IAAD,CAAMI,GAAG,SAASJ,UAAU,eAA5B,aCCGK,EAXF,WAEX,OAEI,yBAAKL,UAAU,UACb,sCCmBOM,EAZA,WAEb,OAEE,4BAAQN,UAAU,YAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,QCgCSO,MAjCf,WAME,OAJAC,qBAAU,WACRC,SAASC,MAAQ,cAChB,IAID,kBAAC,IAAD,KACE,oCAEE,kBAAC,EAAD,MAEA,kBAAC,IAAD,CACEC,OAAQ,gBAAEf,EAAF,EAAEA,SAAF,OACN,kBAACgB,EAAA,EAAD,CAAiBC,UAAW,KAAMC,QAAQ,GACxC,kBAACC,EAAA,EAAD,CAAeC,IAAKpB,EAASoB,IAAKC,WAAW,UAAUC,QAAS,KAC9D,kBAAC,IAAD,CAAQtB,SAAUA,GAChB,kBAAC,IAAD,CAAOuB,KAAK,IAAIC,OAAK,EAACP,UAAWd,IACjC,kBAAC,IAAD,CAAOoB,KAAK,SAASN,UAAWZ,IAChC,kBAAC,IAAD,CAAOkB,KAAK,IAAIN,UAAWX,aCjC7CmB,IAASV,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFF,SAASa,eAAe,SRsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cb0c2ff5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Home = ()=>  {\n  return (\n\n    <section className=\"o-wrapper o-fade\">\n      <h1>Welcome home</h1>\n    </section>\n  );\n}\n\nexport default Home;\n","import React from 'react';\n\nconst About = () =>  {\n  return (\n    <section className=\"o-wrapper o-fade\">\n      <h1>Welcome about</h1>\n    </section>\n  );\n}\n\nexport default About;\n","import React from 'react';\n\nconst NotFound = () =>  {\n  return (\n    <section className=\"o-wrapper\">\n      <h1>404</h1>\n    </section>\n  );\n}\n\nexport default NotFound;\n","// Libs\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n\nconst Nav = () => {\n\n  return (\n\n      <nav className=\"c-nav\">\n        <ul className=\"c-nav__list\">\n          <li className=\"c-nav__list-item\">\n            <Link to=\"/\" className=\"c-nav__link\">Home</Link>\n          </li>\n          <li className=\"c-nav__list-item\">\n            <Link to=\"/about\" className=\"c-nav__link\">About</Link>\n          </li>\n        </ul>\n      </nav>\n\n  );\n}\n\nexport default Nav;\n\n\n\n","// Libs\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n\nconst Logo = () => {\n\n  return (\n\n      <div className=\"c-logo\">\n        <h2>Logo</h2>\n      </div>\n\n  );\n}\n\nexport default Logo;\n","// Libs\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useLocation,\n  useParams\n} from \"react-router-dom\";\n\nimport Nav from './Nav';\nimport Logo from './Logo';\n\n\n\nconst Header = () => {\n\n  return (\n\n    <header className=\"c-header\">\n      <Logo />\n      <Nav />\n    </header>\n\n  );\n}\n\nexport default Header;\n\n\n\n","// Libs\nimport React, {useEffect} from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useLocation,\n  useParams\n} from \"react-router-dom\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\n// Containers\nimport Home from './containers/Home';\nimport About from './containers/About';\nimport NotFound from './containers/NotFound';\n\n\n// Components\nimport Header from './components/Header';\n\nfunction App() {\n\n  useEffect(() => {\n    document.title = \"jaguilera\"\n  }, []);\n\n  return (\n\n    <Router>\n      <>\n\n        <Header />\n\n        <Route\n          render={({location}) => (\n            <TransitionGroup component={null} appear={true}>\n              <CSSTransition key={location.key} classNames=\"o-fade-\" timeout={300}>\n                <Switch location={location}>\n                  <Route path=\"/\" exact component={Home} />\n                  <Route path=\"/about\" component={About} />\n                  <Route path=\"*\" component={NotFound} />\n                </Switch>\n              </CSSTransition>\n            </TransitionGroup>\n          )}\n        />\n\n      </>\n    </Router>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport './assets/scss/main.scss';\n\nimport App from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}